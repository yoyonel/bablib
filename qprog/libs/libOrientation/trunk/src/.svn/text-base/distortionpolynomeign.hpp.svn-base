#ifndef __DISTORTIONPOLYNOMEIGN_HPP__
#define __DISTORTIONPOLYNOMEIGN_HPP__

#include <iostream>
#include "transfo2delementaire.hpp"
#define DPIGN_DEFAULT_ERR2MAX 1e-8

namespace OrientationMATIS
{
	// Distortion: f(r)=(1+c1)*r+c3*r^3+c5*r^5+c7*r^7 avec r la distance au PPS
	class DistortionPolynomeIGN : public Transfo2DElementaire
	{
	public :
		DistortionPolynomeIGN(bool isInterne): Transfo2DElementaire(isInterne), m_xPPS(0), m_yPPS(0), m_cr1(0), m_cr3(0), m_cr5(0), m_cr7(0), m_error_max(DPIGN_DEFAULT_ERR2MAX), m_r2_max(9e99)
		{;}

		DistortionPolynomeIGN(double thexPPS, double theyPPS, double thecr3, double thecr5, double thecr7, bool isInterne): Transfo2DElementaire(isInterne), m_xPPS(thexPPS), m_yPPS(theyPPS),m_cr1(0), m_cr3(thecr3), m_cr5(thecr5), m_cr7(thecr7), m_error_max(DPIGN_DEFAULT_ERR2MAX), m_r2_max(9e99)
		{;}

		DistortionPolynomeIGN(double thexPPS, double theyPPS, double thecr1, double thecr3, double thecr5, double thecr7, bool isInterne): Transfo2DElementaire(isInterne), m_xPPS(thexPPS), m_yPPS(theyPPS),m_cr1(thecr1), m_cr3(thecr3), m_cr5(thecr5), m_cr7(thecr7), m_error_max(DPIGN_DEFAULT_ERR2MAX), m_r2_max(9e99)
		{;}

		DistortionPolynomeIGN(DistortionPolynomeIGN const &dp): Transfo2DElementaire(dp), m_xPPS(dp.m_xPPS), m_yPPS(dp.m_yPPS), m_cr1(dp.m_cr1), m_cr3(dp.m_cr3), m_cr5(dp.m_cr5), m_cr7(dp.m_cr7), m_error_max(dp.m_error_max), m_r2_max(dp.m_r2_max)
		{;}

		shared_ptr<Transfo2DElementaire> Clone() const
		{
			return shared_ptr<Transfo2DElementaire> ( new DistortionPolynomeIGN(*this) );
		}

		void ApplyLocalToImage(double &colomn, double &line ) const;
		void ApplyImageToLocal(double &colomn, double &line ) const;

		double GetcPPS() const { return m_xPPS; }
		double GetlPPS() const { return m_yPPS; }
		double GetR1() const { return m_cr1; }
		double GetR3() const { return m_cr3; }
		double GetR5() const { return m_cr5; }
		double GetR7() const { return m_cr7; }

		//Fixer la limite de validite du polynome de distorsion
		void SetR2max(double r2_max) {m_r2_max=r2_max;}
		void SetR2max(size_t Ns, size_t Nl) {
			double dx = Ns-m_xPPS;
			if(m_xPPS > dx) dx = m_xPPS;
			double dy = Nl-m_yPPS;
			if(m_yPPS > dy) dy = m_yPPS;
			m_r2_max=2.25*(dx*dx+dy*dy); // marge de securite 50%
		}

	protected :

		inline double sqr(double x) const { return x*x; } //(0,1)
		// f(r)=r(1+epsilon(r^2)) -> epsilon(r)=f(r)/r-1
		inline double epsilon(double r2) const //(3,3)
		{
			return m_cr1 + r2*(m_cr3 + r2*(m_cr5 + r2*m_cr7));
		}
		inline double depsilon(double r2) const //(2,2)
		{
			return m_cr3 + 2*m_cr5 + 3*m_cr7;
		}
		inline double f(double r)const //(4,5)
		{
			double r2=sqr(r); //(0,1)
			return r*(1.+epsilon(r2)); //(4,4)
		}
		inline double df(double r)const //(4,7)
		{
			double r2=sqr(r);//(0,1)
			return 1+m_cr1+r2*(3*m_cr3+r2*(5*m_cr5+7*m_cr7*r2));//(4,6)
		}
		// si on a besoin de f ET df, le plus efficace est
		// double r2=r*r, upe = 1+epsilon(r2); // (4,4)
		// double f=r*upe, df=upe+2*r2*depsilon(r2); // (3,5)
		// qui est (7,9) au lieu de (8,12)

		/* DEPRECATED: ApplyLocalToImage a ete optimise et n'utilise plus use valcorrection() BV */
		inline double valcorrection(double const &colomn, double const &line ) const
		{
			double r2 = sqr(colomn - m_xPPS) + sqr(line - m_yPPS);
			if (r2 > m_r2_max) return 0.; // zone de validite du polynome
			double r4 = sqr(r2);
			double r6 = r2 * r4;
			double dr = m_cr1 + m_cr3 * r2 + m_cr5 * r4 + m_cr7 * r6;
			double dr2 = dr * dr;
			if (dr2 > r2) dr = 0.;
			return dr;
		}

		double m_xPPS, m_yPPS;
		double m_cr1, m_cr3, m_cr5, m_cr7;
		double m_error_max, m_r2_max;
	};
} // namespace OrientationMATIS

#endif //#ifndef __DISTORTIONPOLYNOMEIGN_HPP__
