							      >	        inline bool contains(int i, int j) const { return (i 
							      >	        
        void save(QString fileName) const {		      |	        void save(QString fileName, bool littleEndian=false) 
							      >	                if (littleEndian) stream.setByteOrder(QDataSt
        void load(QString fileName) {			      |	        void load(QString fileName, bool littleEndian=false) 
							      >	                if (littleEndian) stream.setByteOrder(QDataSt
							      >	        void savePFM(QString fileName) const {
							      >	            bool color;
							      >	            if (sizeof(Object) == 4)  color = false; else
							      >	            if (sizeof(Object) == 12) color = true;  else {
							      >	                Message::error("the data should fit in 1x32 b
							      >	                return;
							      >	                }
							      >	            QFile file(fileName);
							      >	            if (file.open(QIODevice::WriteOnly)) {
							      >	                QTextStream header(&file);
							      >	                header << (color ? "PF\n" : "Pf\n");
							      >	                header << QString("%1 %2\n").arg(n1).arg(n2);
							      >	                header << "-1.0\n";      // little-endian
							      >	                header.flush();
							      >	                file.write(reinterpret_cast<const char*>(data
							      >	                file.close();
							      >	                }
							      >	            else
							      >	                Message::error(QString("probleme d'ecriture :
							      >	            }
							      >	        
							      >	        //@@@ to check..
							      >	        void loadPFM(QString fileName) {
							      >	            bool color;
							      >	            if (sizeof(Object) == 4)  color = false; else
							      >	            if (sizeof(Object) == 12) color = true;  else {
							      >	                Message::error("the data should fit in 1x32 b
							      >	                return;
							      >	                }
							      >	            const QString typeString = (color ? "PF" : "Pf");
							      >	            QFile file(fileName);
							      >	            if (file.open(QIODevice::ReadOnly)) {
							      >	                QTextStream header(&file);
							      >	                QString line = header.readLine();
							      >	                if (line != typeString) {
							      >	                    MSG_ERROR("the PFM file should begin with
							      >	                    return;
							      >	                    }
							      >	                destroy();
							      >	                
							      >	                line = header.readLine();
							      >	                QStringList list = line.split(" ");
							      >	                n1 = list[0].toInt();
							      >	                n2 = list[1].toInt();
							      >	                MSG_DEBUG_VAR(n1);
							      >	                MSG_DEBUG_VAR(n2);
							      >
							      >	                line = header.readLine();
							      >	                if (line != "-1.0") {
							      >	                    MSG_ERROR("unsupported PFM header line : 
							      >	                    return;
							      >	                    }
							      >	                //header.flush();
							      >
							      >	                file.seek(header.pos());
							      >	                //file.seek(file.pos()-2);
							      >	                
							      >	                data = new Object[n1 * n2];
							      >	                file.read(reinterpret_cast<char*>(data), size
							      >	                file.close();
							      >	                }
							      >	            else
							      >	                Message::error(QString("probleme de lecture :
							      >	            }
							      >	        
