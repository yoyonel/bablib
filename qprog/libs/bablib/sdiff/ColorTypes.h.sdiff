							      >	        //@@@@ plutot GL_RED_INTEGER_EXT
        static const GLenum DATA_FORMAT = GL_LUMINANCE_ALPHA_ |	        //static const GLenum DATA_FORMAT = GL_LUMINANCE_ALPH
							      >	        static const GLenum DATA_FORMAT = GL_RG_INTEGER;     
							      >
							      >	class UByte1 {
							      >	    public:
							      >	        UByte1() : x(0) {}
							      >	        //UByte1(GLubyte x = 0);
							      >	        UByte1(const GLubyte *c);   // tableau de 3 valeurs
							      >	        UByte1(QRgb c);
							      >	    
							      >	        // opérateurs de conversion :
							      >	        inline operator const GLubyte* () const {return c;}  
							      >	        inline operator       GLubyte* ()       {return c;}  
							      >	        QRgb toQRgb() const;
							      >	        QString toQString() const { return QString("(%1)").ar
							      >
							      >	        // opérateurs arithmétiques binaires (membres à membres)
							      >	        friend UByte1 operator+(const UByte1 &a, const UByte1
							      >	        friend UByte1 operator-(const UByte1 &a, const UByte1
							      >	        friend UByte1 operator*(const UByte1 &a, const UByte1
							      >	        friend UByte1 operator/(const UByte1 &a, const UByte1
							      >	            
							      >	        // opérations avec un scalaire :
							      >	        friend UByte1 operator*(float s, const UByte1 &a);
							      >	        friend UByte1 operator*(const UByte1 &a, float s);
							      >	        friend UByte1 operator/(float s, const UByte1 &a);
							      >	        friend UByte1 operator/(const UByte1 &a, float s);
							      >	        
							      >	        // opérateurs de modification :
							      >	        UByte1 operator+=(const UByte1 &a);
							      >	        UByte1 operator-=(const UByte1 &a);
							      >	        UByte1 operator*=(const UByte1 &a);
							      >	        UByte1 operator/=(const UByte1 &a);
							      >	        UByte1 operator*=(float s);
							      >	        UByte1 operator/=(float s);
							      >
							      >	        void reset(float r=0, float g=0, float b=0, float a=0
							      >	        //void setGL() const;
							      >	        
							      >	        //UInt3 toUInt3() const;
							      >	        
							      >	    public:
							      >	        union {
							      >	            struct { GLubyte r; };
							      >	            struct { GLubyte x; };
							      >	            GLubyte c[1];
							      >	            };
							      >	        static const int SIZE = 1;
							      >	        static const GLint  TEX_FORMAT = 1;  // = GL_RGB
							      >	        static const GLenum DATA_FORMAT = GL_RED;
							      >	        //static const GLenum DATA_FORMAT = GL_LUMINANCE;
							      >	        static const GLenum DATA_TYPE = GL_UNSIGNED_BYTE;
							      >	    };
							      >
