							      >	#include "Vec2d.h"
							      >	#include "Vec3d.h"
							      >	#include "Vec4d.h"
							      >	#include <Dir.h>
            int n = 1;					      |				int n = 0;
							      >					n++;
							      >
							      >					// handle potiential include 
							      >					const QString incTokenBegin =
							      >					const QString incTokenEnd   =
							      >					if (line.trimmed().startsWith
							      >						QString incFileName =
							      >						incFileName.chop(incT
							      >						ParamSet subParamSet;
							      >						subParamSet.load(Dir:
							      >						insert(subParamSet, t
							      >						continue;
							      >					}
							      >
                n++;					      <
							      >	bool ParamSet::save(QString fileName) const {
							      >		QFile file(fileName);
							      >		if (!file.open(QIODevice::WriteOnly | QIODevice::Text
							      >		QTextStream stream(&file);
							      >		foreach (const QString &k, table.keys())
							      >			stream << QString("%1 = %2\n").arg(k).arg(tab
							      >		stream.flush();
							      >		file.close();
							      >		//this->fileName = fileName;    //@ a voir + default 
							      >		return true;
							      >	}
							      >
							      >	/************************************************************
							      >
							      >	template<>
							      >	void ParamSet::add(QString name, QString value, bool overwrit
							      >		if (!defines(name)) table.insert(name, value);
							      >		else if (overwrite) table[name] = value;
							      >	}
							      >
							      >	//@ integrate these specializations with the gets
							      >	#define DEF_ADD_NUMERIC(base_type)  \
							      >		template<> void ParamSet::add(QString name, base_type
							      >	#define DEF_ADD_NUMERIC_COMP2(comp_type)  \
							      >		template<> void ParamSet::add(QString name, comp_type
							      >	#define DEF_ADD_NUMERIC_COMP3(comp_type)  \
							      >		template<> void ParamSet::add(QString name, comp_type
							      >	#define DEF_ADD_NUMERIC_COMP4(comp_type)  \
							      >		template<> void ParamSet::add(QString name, comp_type
							      >
							      >	//template<> void ParamSet::add(QString name, float v, bool o
							      >
							      >	DEF_ADD_NUMERIC(int)
							      >		DEF_ADD_NUMERIC(float)
							      >		DEF_ADD_NUMERIC(double)
							      >
							      >		DEF_ADD_NUMERIC_COMP2(Vec2)
							      >		DEF_ADD_NUMERIC_COMP3(Vec3)
							      >		DEF_ADD_NUMERIC_COMP4(Vec4)
							      >
							      >		DEF_ADD_NUMERIC_COMP2(Vec2d)
							      >		DEF_ADD_NUMERIC_COMP3(Vec3d)
							      >		DEF_ADD_NUMERIC_COMP4(Vec4d)
							      >
							      >		DEF_ADD_NUMERIC_COMP2(Float2)
							      >		DEF_ADD_NUMERIC_COMP3(Float3)
							      >		DEF_ADD_NUMERIC_COMP4(Float4)
							      >
							      >		//template<>
							      >		//void ParamSet::add(QString name, Vec2 v, bool overw
							      >		//    add(name, QString("%1 %2").arg(v.x).arg(v.y), o
							      >		//    }
							      >
							      >	void ParamSet::insert(const ParamSet &params, bool overwrite)
							      >		QList<QString> keys = params.table.keys();
							      >		foreach (const QString &k, keys) {
							      >			//if (!defines(k)) table.insert(k, params.tab
							      >			//else if (overwrite) table[k] = params.table
							      >			add<QString>(k, params.table[k], overwrite);
							      >		}
							      >	}
							      >
    return table[name].section(" ", size * pos, size * (pos + |		const QString &value = table[name];
							      >		return pos == -1 ? value : value.section(" ", size * 
							      |	/*
							      >	*/
							      >	#define GET_VAL(type, size, defVal, instructions, ...) \
							      >		template<> type ParamSet::defaultValue() { return def
							      >		template<> type ParamSet::get(QString name, type def,
							      >			if (defines(name)) {                         
							      >				QString val = getComponent(name, pos,
							      >				__VA_ARGS__	                     
							      >				errorFormat(name, #type);            
							      >				}                                    
							      >			else if (warn)                               
							      >				errorNotDef(name);                   
							      >			return def;                                  
							      >	}
							      >		/*
GET_VAL(GLenum, 1, GL_FALSE,				      |		*/
							      >
							      >	#define GET_VAL_COMP2(vec_class_name, base_type, qstring_conv
							      >		GET_VAL(vec_class_name, 2, vec_class_name(0,0),      
							      >		QString sx = val.section(" ", 0, 0);                 
							      >		QString sy = val.section(" ", 1, 1);                 
							      >		bool ok1; base_type x = sx.qstring_convert_method(&ok
							      >		bool ok2; base_type y = sy.qstring_convert_method(&ok
							      >		if (ok1 && ok2) return vec_class_name(x, y);         
							      >		)
							      >
							      >	#define GET_VAL_COMP3(vec_class_name, base_type, qstring_conv
							      >		GET_VAL(vec_class_name, 3, vec_class_name(0,0,0),    
							      >		QString sx = val.section(" ", 0, 0);                 
							      >		QString sy = val.section(" ", 1, 1);                 
							      >		QString sz = val.section(" ", 2, 2);                 
							      >		bool ok1; base_type x = sx.qstring_convert_method(&ok
							      >		bool ok2; base_type y = sy.qstring_convert_method(&ok
							      >		bool ok3; base_type z = sz.qstring_convert_method(&ok
							      >		if (ok1 && ok2 && ok3) return vec_class_name(x, y, z)
							      >		)
							      >
							      >	#define GET_VAL_COMP4(vec_class_name, base_type, qstring_conv
							      >		GET_VAL(vec_class_name, 4, vec_class_name(0,0,0,0),  
							      >		QString sx = val.section(" ", 0, 0);                 
							      >		QString sy = val.section(" ", 1, 1);                 
							      >		QString sz = val.section(" ", 2, 2);                 
							      >		QString sw = val.section(" ", 3, 3);                 
							      >		bool ok1; base_type x = sx.qstring_convert_method(&ok
							      >		bool ok2; base_type y = sy.qstring_convert_method(&ok
							      >		bool ok3; base_type z = sz.qstring_convert_method(&ok
							      >		bool ok4; base_type w = sw.qstring_convert_method(&ok
							      >		if (ok1 && ok2 && ok3 && ok4) return vec_class_name(x
							      >		)
							      >
							      >
							      >		GET_VAL_COMP2(Vec2, float, toFloat)
							      >		GET_VAL_COMP3(Vec3, float, toFloat)
							      >		GET_VAL_COMP4(Vec4, float, toFloat)
							      >
							      >		GET_VAL_COMP2(Float2, float, toFloat)
							      >		GET_VAL_COMP3(Float3, float, toFloat)
							      >		GET_VAL_COMP4(Float4, float, toFloat)
							      >
							      >		GET_VAL_COMP2(Vec2d, double, toDouble)
							      >		GET_VAL_COMP3(Vec3d, double, toDouble)
							      >		GET_VAL_COMP4(Vec4d, double, toDouble)
							      >
							      >		GET_VAL_COMP3(UByte3, uint, toUInt)
							      >		GET_VAL_COMP4(UByte4, uint, toUInt)
							      >
							      >
							      >		GET_VAL(GLenum, 1, GL_FALSE,
    							      <
    // formats de blends				      <
    _(GL_ONE)_(GL_ZERO)_(GL_ONE_MINUS_SRC_COLOR)_(GL_ONE_MINU <
    							      <
    // parametres pour les points_sprites: POINT_SPRITE_R_MOD <
    _(GL_ONE)_(GL_S)_(GL_R)				      <
    _(GL_LOWER_LEFT)_(GL_UPPER_LEFT)			      <
    							      <
    // geometry shader: input types			      <
    _(GL_POINTS)_(GL_LINES)_(GL_LINES_ADJACENCY_EXT)_(GL_TRIA <
    							      <
    // geometry shader: output types			      <
    _(GL_POINTS)_(GL_LINE_STRIP)_(GL_TRIANGLE_STRIP)	      <
    							      <
							      >		/*
    template<> QList<type> ParamSet::get(QString name, QList< |		template<> QList<type> ParamSet::get(QString name, QL
							      >		*/
							      >	#define GET_LIST(type, size, instructions, ...) \
							      >		template<> QList<type> ParamSet::defaultValue() { ret
							      >		template<> QList<type> ParamSet::get(QString name, QL
							      >			if (defines(name)) {                         
							      >				QStringList values = getComponents(na
							      >				QList<type> res;                     
							      >				bool ok = true;                      
							      >				foreach (QString val, values) {      
							      >					type v;                      
							      >					__VA_ARGS__		
							      >					if (!ok) break;              
							      >					res << v;                    
							      >					}                            
							      >				if (ok) return res;                  
							      >				errorFormat(name, "QList<"#type">"); 
							      >				}                                    
							      >			else if (warn)                               
							      >				errorNotDef(name);                   
							      >			return def;                                  
							      >		}
