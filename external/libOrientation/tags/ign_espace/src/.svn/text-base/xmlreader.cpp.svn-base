#include <sstream>
#include <fstream>
#include <iostream>

#include "noboost.hpp"

#include <tinyxml.h>

#include "outil_xml.hpp"
#include "modeleprojectionconique.hpp"
#include "modeleprojectioncarto.hpp"
#include "distortionpolynomeign.hpp"
#include "distortiongrillematis.hpp"

namespace OrientationMATIS
{

shared_ptr<ModeleProjection> xml_reader(const std::string &filename)
{
//	std::cout << " conic_xml_reader " << "\n";

	TiXmlDocument doc(filename.c_str());
	if (!doc.LoadFile())
	{
//		std::cout << "problem d'ouverture de fichier orientation !" << std::endl;
		return shared_ptr<ModeleProjection>();
	}

//	std::cout << "fichier orientation ouverte!" << std::endl;
	TiXmlHandle hDoc(&doc);
	TiXmlElement* pElem;
	TiXmlHandle h_orientation(0);

	// Lecture <orientation>
//	std::cout<<" av : orientation \n";
	pElem = hDoc.FirstChildElement("orientation").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_orientation = TiXmlHandle(pElem);

	// auxiliaryData
	AuxiliaryData aux;

	// Lecture <auxiliarydata>
//	std::cout<<" av : auxiliarydata \n";
	pElem = h_orientation.FirstChildElement("auxiliarydata").Element();
	if (!pElem) 
		return shared_ptr<ModeleProjection>();
	TiXmlHandle h_aux = TiXmlHandle(pElem);
	
//	std::cout<<" av : image_date \n";
	pElem = h_aux.FirstChildElement("image_date").Element();
	if (pElem)
	{
//		std::cout<<" av boucle: auxiliarydata \n";		
		TiXmlHandle h_img_date = TiXmlHandle(pElem);
		Date img_date;
		if (XmlHandler::ReadDate(&h_img_date, img_date))
			aux.SetImageDate(img_date);
//		std::cout<<" ap: auxiliarydata \n";
	}
	
	// Lecture <auxiliarydata> <Samples>
//	std::cout<<" av : lecture samples \n";
//	pElem = h_aux.FirstChildElement("samples").Element();
//	if (pElem)
//	{
//		TiXmlHandle h_sample = TiXmlHandle(pElem);
		std::vector <Sample> mysamples;
		XmlHandler::ReadSamples(&h_aux, mysamples);
		aux.AddSamples(mysamples);
		// addition des samples dans auxiliary data
		
//	}
	
	
//	if (pElem)
//	{
//		TiXmlHandle h_samples = TiXmlHandle(pElem);
//		for (unsigned int i=0; h_samples.Child(i).ToElement() != 0; ++i)
//		{
//			Sample s;
//			TiXmlElement * el = h_samples.Child(i).ToElement();
//			el->QueryDoubleAttribute("x", &s.x);
//			el->QueryDoubleAttribute("y", &s.y);
//			el->QueryDoubleAttribute("z", &s.z);
//			el->QueryDoubleAttribute("c", &s.c);
//			el->QueryDoubleAttribute("l", &s.l);
//			s.systeme_geodesique = el->Attribute("systeme_geodesique");
//			aux.AddSample(s);
////			std::cout<<" ajout de sample : "<<i<<std::endl;
//		}
//	}
//	
	
//	std::cout<<" ap : lecture samples number of samples :"<<aux.GetSamples().size()<<std::endl;
	
	//
	// Lecture <geometry>
	TiXmlHandle h_geometry(0);
	pElem = h_orientation.FirstChildElement("geometry").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_geometry = TiXmlHandle(pElem);
//	std::cout << h_geometry.Element()->Value() << std::endl;

	// Lecture <intrinseque>
	TiXmlHandle h_intrinseque(0);
	pElem = h_geometry.FirstChildElement("intrinseque").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_intrinseque = TiXmlHandle(pElem);
//	std::cout << h_intrinseque.Element()->Value() << std::endl;

	// Lecture <sensor>
	TiXmlHandle h_sensor(0);
	pElem = h_intrinseque.FirstChildElement("sensor").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_sensor = TiXmlHandle(pElem);
//	std::cout << h_sensor.Element()->Value() << std::endl;

	// Lecture <sensor> <calibration_date>
//	std::cout<<" av : calibration_date\n";
	pElem = h_sensor.FirstChildElement("calibration_date").Element();
	if (pElem)                      
	{
		TiXmlHandle h_calibration_date = TiXmlHandle(pElem);
		Date calibration_date;
		if (XmlHandler::ReadDate(&h_calibration_date, calibration_date))
			aux.SetCalibrationDate(calibration_date);
	}
//	std::cout<<" ap : calibration_date\n";
/*
	if (pElem->FirstChildElement("day") == 0)
	{
		int calibration_date[6];
		for (int i = 0; i < 6; i++)
			calibration_date[i] = 0;
		if (pElem->GetText())
		{
			std::string str = pElem->GetText();
//			std::cout<<"calibration_date : "<<pElem->GetText()<<" = "<<str<<std::endl;
			std::vector<std::string> SplitVec;
			boost::algorithm::split(SplitVec, str, boost::is_any_of("-/"));
			int taille = SplitVec.size();
			if (taille > 6)
				return shared_ptr<ModeleProjection>();
			int ind = 0;
	
			for (int i = taille - 1; i >= 0; i--)
			{
				calibration_date[ind] = atoi(SplitVec[i].c_str());
//				std::cout << "calibration_date[" << ind << "]" << calibration_date[ind] << std::endl;
				ind++;
			}
		}
		aux.SetCalibrationDate(calibration_date[0], calibration_date[1], calibration_date[2], 
					   calibration_date[3], calibration_date[4], calibration_date[5]);

	}
	else
	{

		bool calibration_date_ok = true;
		if (!h_calibration_date.FirstChildElement("year").Element() || !h_calibration_date.FirstChildElement("month").Element() 
	|| !h_calibration_date.FirstChildElement("day").Element() || !h_calibration_date.FirstChildElement("hour").Element()
	|| !h_calibration_date.FirstChildElement("minute").Element() || !h_calibration_date.FirstChildElement("second").Element() 
	|| !h_calibration_date.FirstChildElement("time_system").Element())

		calibration_date_ok = false;
		int year, month, day, hour, minute;
		float second;
		if (calibration_date_ok)
		{
			year = atoi(h_calibration_date.FirstChildElement("year").Element()->GetText());
			month = atoi(h_calibration_date.FirstChildElement("month").Element()->GetText());
			day = atoi(h_calibration_date.FirstChildElement("day").Element()->GetText());
			hour = atoi(h_calibration_date.FirstChildElement("hour").Element()->GetText());
			minute = atoi(h_calibration_date.FirstChildElement("minute").Element()->GetText());
			second = atof(h_calibration_date.FirstChildElement("second").Element()->GetText());
			std::string time_system = h_calibration_date.FirstChildElement("time_system").Element()->GetText();
//			std::cout << year << "\t" << month << "\t" << day << "\t" << hour << "\t" << minute << "\t" << std::setprecision(4) << second << std::endl;
			aux.SetCalibrationDate(year, month, day, hour, minute, second, time_system);
		}
	}
*/

//	std::cout<<"	// Lecture <image_size> <width> & <height>"<<std::endl;
	// Lecture <image_size> <width> & <height>
	TiXmlHandle h_image_size(0);
	pElem = h_sensor.FirstChildElement("image_size").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_image_size = TiXmlHandle(pElem);
	if (!h_image_size.FirstChildElement("width").Element() || !h_image_size.FirstChildElement("height").Element())
		return shared_ptr<ModeleProjection>();
	int imNs = atoi(h_image_size.FirstChildElement("width").Element()->GetText());
	int imNl = atoi(h_image_size.FirstChildElement("height").Element()->GetText());

//	std::cout<<"	// Lecture <sensor> <name>"<<std::endl;
	// Lecture <sensor> <name>
	pElem = h_sensor.FirstChildElement("name").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
//	std::cout<<"hey!"<<std::endl;
	std::string cam_name ;
	if (pElem->GetText())
		cam_name = pElem->GetText();
//	std::cout<<"hey aprÃ¨s !"<<std::endl;
//	std::cout << "cam_name : " << cam_name << std::endl;

	// Lecture <ppa> <c> <l> <focale>
	TiXmlHandle h_ppa(0);
	pElem = h_sensor.FirstChildElement("ppa").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_ppa = TiXmlHandle(pElem);
	if (!h_ppa.FirstChildElement("c").Element() || !h_ppa.FirstChildElement("l").Element() || !h_ppa.FirstChildElement("focale").Element())
		return shared_ptr<ModeleProjection>();
	double ppa_x = atof(h_ppa.FirstChildElement("c").Element()->GetText());
	double ppa_y = atof(h_ppa.FirstChildElement("l").Element()->GetText());
	double focale = atof(h_ppa.FirstChildElement("focale").Element()->GetText());

	// Lecture <distortion>
//	std::cout<<"// Lecture <distortion>"<<std::endl;
	TiXmlHandle h_distortion(0);
	pElem = h_sensor.FirstChildElement("distortion").Element();
	bool distortion_ok = false;
	Transfo2D t2D;
	if (pElem)
	{
		//		return shared_ptr<ModeleProjection>();
		h_distortion = TiXmlHandle(pElem);
		if (!h_distortion.FirstChildElement("pps").FirstChildElement("c").Element() || !h_distortion.FirstChildElement("pps").FirstChildElement("l").Element()
				|| !h_distortion.FirstChildElement("r3").Element() || !h_distortion.FirstChildElement("r5").Element() || !h_distortion.FirstChildElement("r7").Element())
		return shared_ptr<ModeleProjection>();
		double pps_x = atof(h_distortion.FirstChildElement("pps").FirstChildElement("c").Element()->GetText());
		double pps_y = atof(h_distortion.FirstChildElement("pps").FirstChildElement("l").Element()->GetText());
		double r3 = atof(h_distortion.FirstChildElement("r3").Element()->GetText());
		double r5 = atof(h_distortion.FirstChildElement("r5").Element()->GetText());
		double r7 = atof(h_distortion.FirstChildElement("r7").Element()->GetText());
		// Distortion
		shared_ptr<Transfo2DElementaire> tr = shared_ptr<Transfo2DElementaire>(new DistortionPolynomeIGN(pps_x, pps_y, r3, r5, r7, true));
		t2D.AddTransformation2D(tr);
		distortion_ok = true;
	}


	// Lecture <extrinseque>
//	std::cout<<"// Lecture <extrinseque>"<<std::endl;
	TiXmlHandle h_extrinseque(0);
	pElem = h_geometry.FirstChildElement("extrinseque").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_extrinseque = TiXmlHandle(pElem);
//	std::cout << h_extrinseque.Element()->Value() << std::endl;
	
	// Lecture <Systeme>
//	std::cout<<"// Lecture <Systeme>"<<std::endl;
	TiXmlHandle h_(0);
	pElem = h_extrinseque.FirstChildElement("systeme").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	std::string nomsystem ;
	if (pElem->GetText()) nomsystem= pElem->GetText();
//	std::cout<<"pElem->GetText() : "<<nomsystem<<std::endl;
	
	std::string nomsysy_out;

//	std::cout << "Nom systeme geodesique xml : " << nomsystem << std::endl;
	if (nomsystem[0] == '+')
	{
		nomsysy_out = nomsystem;
	}
	else
	{
		std::vector<std::string> SplitVecNomSys;
		split(SplitVecNomSys, nomsystem, is_any_of(" "));
		// Old orientation sys = "MATISRTL X Y ..."
		if (!SplitVecNomSys.size()) 
			return shared_ptr<ModeleProjection>();
	//	std::cout <<"SplitVecNomSys[0]"<<SplitVecNomSys[0]<<std::endl;
		if (to_upper_copy(SplitVecNomSys[0])=="MATISRTL")
		{
				nomsysy_out = nomsystem;
	//			std::cout<<"nomsysy_out : "<<nomsysy_out<<std::endl;
		}
		else
		{
			// orientation stereopolis "LambertX" ou "Lamber X"
			std::string str1,str2;
			str1 = nomsystem; // str1 = Lambert93
			str2 = nomsystem; //str2 = Lamber93
			trim_right_if(str1,is_any_of("0123456789")); // str1 = Lambert
			trim_left_if(str2, is_any_of(str1)); // str2 = 93
	//		std::cout<<"str1=("<<str1<<")"<<"  str2=("<<str2<<")"<<std::endl;
			trim(str2); // str2 = 93 sans espace eventuelle avant et apres
			trim(str1);
	//		std::cout<<"str1=("<<str1<<")"<<"  str2=("<<str2<<")"<<std::endl;
			// System check
			if (to_upper_copy(str1) != "LAMBERT" &&
					to_upper_copy(str1) != "LAMB" )
			return shared_ptr<ModeleProjection>();
			int zonelamb = atoi(str2.c_str());
	//		std::cout<<"ModeleProjection::NomSysteme(zonelamb)"<<ModeleProjection::NomSysteme(zonelamb)<<std::endl;
			nomsysy_out = Geodesie::NomSysteme(zonelamb);
		}
	}
	// Lecture <sommet>
//	std::cout<<"// Lecture <sommet>"<<std::endl;
	TiXmlHandle h_sommet(0);
	pElem = h_extrinseque.FirstChildElement("sommet").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_sommet = TiXmlHandle(pElem);

	if (!h_sommet.FirstChildElement("easting").Element() || !h_sommet.FirstChildElement("northing").Element() || !h_sommet.FirstChildElement("altitude").Element())
		return shared_ptr<ModeleProjection>();
	double easting = atof(h_sommet.FirstChildElement("easting").Element()->GetText());
	double northing = atof(h_sommet.FirstChildElement("northing").Element()->GetText());
	double altitude = atof(h_sommet.FirstChildElement("altitude").Element()->GetText());
//	std::cout << "sommet: " << easting << "\t" << northing << "\t" << altitude << std::endl;
	double sommet[3];
	sommet[0] = easting;
	sommet[1] = northing;
	sommet[2] = altitude;

	// Lecture <rotation>
	double rotation[3][3];
	double *iVect = rotation[0];
	double *jVect = rotation[1];
	double *kVect = rotation[2];

	TiXmlHandle h_rotation(0);
	pElem = h_extrinseque.FirstChildElement("rotation").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_rotation = TiXmlHandle(pElem);

	// Lecture <rotation> <mat3d>
	TiXmlHandle h_Image2Ground(0);
	pElem = h_rotation.FirstChildElement("Image2Ground").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_Image2Ground = TiXmlHandle(pElem);
//	std::cout << "Image2Ground : " << pElem->GetText() << std::endl;
	bool Isimage2Ground = false;
	std::string t(pElem->GetText());
	if (t == "true")
	{
		Isimage2Ground = true;
		//		std::cout << "TRUE" << std::endl;
	}

	// Lecture <rotation> <mat3d>
	TiXmlHandle h_mat3d(0);
	pElem = h_rotation.FirstChildElement("mat3d").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_mat3d = TiXmlHandle(pElem);

	// Lecture <rotation> <mat3d>  <l1>
	TiXmlHandle h_l1(0);
	pElem = h_mat3d.FirstChildElement("l1").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_l1 = TiXmlHandle(pElem);
	// Lecture <rotation> <mat3d>  <l1> <pt3d>
	TiXmlHandle h_pt3d(0);
	pElem = h_l1.FirstChildElement("pt3d").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_pt3d = TiXmlHandle(pElem);
	double x0, y0, z0;
	XmlHandler::ReadPt3D(&h_pt3d, x0, y0, z0);
//	std::cout<<"(x,y,z) = "<< std::setprecision(12) <<x0<<","<<y0<<","<<z0<<std::endl;


	// Lecture <rotation> <mat3d>  <l2>
	TiXmlHandle h_l2(0);
	pElem = h_mat3d.FirstChildElement("l2").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_l2 = TiXmlHandle(pElem);
	// Lecture <rotation> <mat3d>  <l2> <pt3d>
	pElem = h_l2.FirstChildElement("pt3d").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_pt3d = TiXmlHandle(pElem);
	double x1, y1, z1;
	XmlHandler::ReadPt3D(&h_pt3d, x1, y1, z1);
	//		std::cout<<"(x,y,z) = "<< std::setprecision(12) <<x<<","<<y<<","<<z<<std::endl;

	// Lecture <rotation> <mat3d>  <l3>
	TiXmlHandle h_l3(0);
	pElem = h_mat3d.FirstChildElement("l3").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_l3 = TiXmlHandle(pElem);
	// Lecture <rotation> <mat3d>  <l3> <pt3d>
	pElem = h_l3.FirstChildElement("pt3d").Element();
	if (!pElem)
		return shared_ptr<ModeleProjection>();
	h_pt3d = TiXmlHandle(pElem);
	double x2, y2, z2;
	XmlHandler::ReadPt3D(&h_pt3d, x2, y2, z2);
	//		std::cout<<"(x,y,z) = "<< std::setprecision(12) <<x<<","<<y<<","<<z<<std::endl;

	// rotation est le suivant
	if (Isimage2Ground)
	{
		iVect[0] = x0;
		iVect[1] = x1;
		iVect[2] = x2;
		jVect[0] = y0;
		jVect[1] = y1;
		jVect[2] = y2;
		kVect[0] = z0;
		kVect[1] = z1;
		kVect[2] = z2;
	}
	else
	{
		iVect[0] = x0;
		iVect[1] = y0;
		iVect[2] = z0;
		jVect[0] = x1;
		jVect[1] = y1;
		jVect[2] = z1;
		kVect[0] = x2;
		kVect[1] = y2;
		kVect[2] = z2;
	}

	double PPxy[2];
	PPxy[0] = ppa_x;
	PPxy[1] = ppa_y;
	ModelePhysiqueExtrinseque extr(sommet, rotation);

	
	// On s'en fout
	//shared_ptr<InternalOrientation>res = shared_ptr<InternalOrientation>( new InternalOrientation(mp) );

	

	
	
//	res->AddTransformation2DElementaire(tr, true);

	aux.SetCameraName(cam_name.c_str());
	
	//Systemegeodesie
//	std::ostringstream nomSysteme;
//	nomSysteme << "MATISRTL " << 0 << " " << 0 << " " << "Lambert93";

	
	
	XmlHandler::ReadTransfo2D(&h_orientation, t2D);
	shared_ptr<ModeleProjection> mp = shared_ptr<ModeleProjection>( 
		new ModeleProjectionConique(imNs, imNl, 
										aux, t2D, nomsysy_out,
										extr, 
										focale, PPxy[0], PPxy[1]) );
//std::cout<< "fin de lecture : number of samples  :"<<mp->GetAuxiliaryData().GetSamples().size()<<std::endl;

	
	return mp;
}

	shared_ptr<ModeleProjection> carto_micmac_reader(const std::string &filename)
	{
		/* Exemple
		<FileOriMnt>
		<NameFileMnt>/home/dboldo/noyau/MICMAC_DATA/Jeux1-Spot-Epi/MEC-EPI/Px1_Num6_DeZoom1_LeChantier.tif</NameFileMnt>
		<NameFileMasque>/home/dboldo/noyau/MICMAC_DATA/Jeux1-Spot-Epi/MEC-EPI/Masq_LeChantier_DeZoom1.tif</NameFileMasque>
		<NombrePixels>1000 1000</NombrePixels>
		<OriginePlani>0 0</OriginePlani>
		<ResolutionPlani>1 1</ResolutionPlani>
		<OrigineAlti>0</OrigineAlti>
		<ResolutionAlti>0.25</ResolutionAlti>
		<Geometrie>eGeomPxBiDim</Geometrie>
		</FileOriMnt>
		*/

		TiXmlDocument doc(filename.c_str());
		if (!doc.LoadFile())
		{
			return shared_ptr<ModeleProjection>();
		}

		TiXmlHandle hDoc(&doc);
		TiXmlElement* pElem;

		// Lecture <orientation>
		pElem = hDoc.FirstChildElement("FileOriMnt").Element();
		if (!pElem)
			return shared_ptr<ModeleProjection>();
		TiXmlHandle h_fileorimnt = TiXmlHandle(pElem);

		pElem = h_fileorimnt.FirstChildElement("Geometrie").Element();
		if (!pElem) 
			return shared_ptr<ModeleProjection>();
		std::string geometrie = pElem->GetText();
		if (geometrie !="eGeomMNTCarto" && geometrie!="eGeomMNTEuclid")
			return shared_ptr<ModeleProjection>();
		
		pElem = h_fileorimnt.FirstChildElement("NombrePixels").Element();
		if (!pElem) 
			return shared_ptr<ModeleProjection>();
		std::istringstream iss (pElem->GetText());
		unsigned int nc, nl;
		iss >> nc >> nl;
		
		pElem = h_fileorimnt.FirstChildElement("OriginePlani").Element();
		if (!pElem) 
			return shared_ptr<ModeleProjection>();
		iss.str(pElem->GetText());
		double position_origine_x, position_origine_y;
		iss >> position_origine_x >> position_origine_y;

		pElem = h_fileorimnt.FirstChildElement("ResolutionPlani").Element();
		if (!pElem) 
			return shared_ptr<ModeleProjection>();
		iss.str(pElem->GetText());
		double pas_x, pas_y;
		iss >> pas_x >> pas_y;

		std::string systemeGeodesie;
		pElem = h_fileorimnt.FirstChildElement("NumZoneLambert").Element();
		if(pElem) 
		{
		  int zoneLambert =  atoi(pElem->GetText());
		  systemeGeodesie = Geodesie::NomSysteme(zoneLambert);
		}

		// conventions ori
		pas_y= -pas_y;

		AuxiliaryData data;
		Transfo2D transfo2D;

		return shared_ptr<ModeleProjection> (new ModeleProjectionCarto(nc, nl, data, 
				transfo2D, systemeGeodesie, 
				position_origine_x, position_origine_y, pas_x, pas_y) );
	}

};
