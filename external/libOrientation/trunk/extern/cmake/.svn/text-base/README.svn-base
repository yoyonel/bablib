# MATIS/Extern repository Cmake README file
# author: Bruno VALLET
# date: 23/10/2009

1) INTRODUCTION

The following MATIS/Extern PACKAGES/libraries/executables can now be built using Cmake:
* ZLIB/zlib
* JPEG/libjpeg
* PNG/libpng
* TIFF/libtiff
* SHAPELIB/shapelib/shpcreate shpadd shpdump shprewind dbfcreate dbfadd dbfdump shptest shputils shptreedump
* PROJ4/proj4/cs2cs proj geod nad2nad nad2bin
* LIB3DS/lib3ds/3dsplay
* TINYXML/tinyxml tinyxml_STL/tinyXmlTest tinyXmlTestSTL
* SGL/sgl sgldb sglu sgl3ds sglobj sgltiff sglpng sgljpeg

NOTE 1: the distinction between a library (generally lowercase) and a package (generally uppercase)
that may contain several libraries, executables, documentation, tests, data,...
NOTE 2: in MATIS/Extern the directory containing a package usually has the name of its main library

2) RUNNING CMAKE

In each MATIS/Extern directory of a supported package, you will find a cmake directory.
When running Cmake, you must input that directory (full_path/Extern/myproject/cmake) as source directory.
You may then enter any directory as build directory (usually full_path/Extern/myproject/cmake/build/debug or release).
Press configure, choose your development platform. You will see a few variables appear.
Set the CMAKE_BUILD_MODE to debug or release
NOTE: for VC users, you must select the same build type in VC
Add to the PREFIX_PATH any path where you have installed a required package (for the moment only OpenGL/GLUT is required)
Press configure until you can generate, press generate.

3) COMPILING AND INSTALLING

Cmake has generated a file with the name of the package (uppercase) of the format required
by your development platorm in the build directory, and/or a makefile.
Open that file and generate 'ALL_BUILD' then 'INSTALL'
On Unix, you can simply go to the build directory and type 'make' then 'make install'
(you might need to do a 'sudo make install' if you are not root).

4) CUSTOM BUILD

The procedure above installs only the libraries. If you enable CUSTOM_BUILD in Cmake, you will have acces to more options:
-BUILD_XXX: allows you to choose wether you want to build XXX
-BUILD_SHARED_LIBS: switch between shared/dynamic (.so/.dll) and static (.a/.lib) libraries.
-RUN_TESTS: prepare scripts to run tests (unix only for the moment)

5) CMAKE BUILD MECHANISM (ADVANCED)

The CMake mechanism of the MATIS/Extern library factorises most of the CMake code
in the CommonMacros.cmake in the same directory as this file. Read it to understand how it works.
In each $package$/cmake you will find:
* CMakeLists.txt that declares the project, gives general package infos and calls the main macro __common_project(_project_name).
* ${PROJECT_NAME}-lib -bin -docs -test: auxiliary files used to build the libraries/executables/documentation/tests.
  Their presence indicates if the package has libraries/executables/documentation/tests.
  A ${PROJECT_NAME}-lib or -bin relies on a a proper call of __add_xxx (xxx=library or executable) for each target to add.
  This means that for a target ${name}, it defines:
	+ ${name}_FULL_SRCS: list of source files with full path (we chose a non intrusive cmake,
	so we do not have CMakeLists.txt in the source so we need to refer sources with full path)
	NOTE: To help you do that, the macro __global_append(_from _to _append) appends the text ${_append}
	to each element of _from and places the result in _to. Moreover, __common_project(_project_name) defines {_project_name}_ROOT_DIR
	that contains the root of the package (you need to add /, /src/, /libxxx/... depending where the source is)
	+ ${name}_FULL_HEADERS: same for the headers. These are not required to build but for installation.
	Moreover they will be added to your project.
	+ ${name}_DEFINITIONS: compile flags and preprocessor definitions to use when building ${name}.
	They will be exported such that any target using this package will use these definitions.
	+ ${name}_DEPENDENCIES: list of your target's dependencies. It can be either a target defined within your project (usually lowercase)
	or a package (usually uppercase). In case you want to link with a single library of a package,
	do a find_package(...) prior to calling __add_xxx, and manage the include dirs, definitions and link libraries manually (not adviced).
	
NOTE 1: don't forget to include_directories(your_headers_directory)
NOTE 2: Windows DLLs require different symbols to be defined when compiling a lib and when linking with it.
in that case, definitions to export only are added to ${package_name}_DEFINITIONS,
and definitions for compiling the lib only are added with a
set_properties(TARGET ${name} PROPERTIES COMPILE_FLAGS ...) or equivalent after calling __add_xxx.
As we chose a non intrusive cmake, remember that add_definitions(...) will have the scope of the whole package
and will not export definitions. You shouldn't need to use it.

6) CMAKE INSTALLATION MECHANISM

Installation is handled by:
* __add_xxx macros: exports the target it builds and installs its headers
* __install_targets macros: installs ${PROJECT_NAME}-targets.cmake and ${PROJECT_NAME}Config.cmake

The installation dir ${CMAKE_INSTALL_PREFIX} is defined in the __default_configuration macro.
The following files will be installed:
* The ${name}_FULL_HEADERS in /include/${name}.
* The libraries (.a/.so/.lib) in /lib
* The binaries (executables and .dll) in /bin
* The ${package_name}Config.cmake and ${package_name}-targets.cmake in /cmake.
  The config file template is commonConfig.cmake.in (in this file's directory).
  It imports the targets and sets ${package_name}_LIBRARIES, _INCLUDE_DIRS, _DEFINITIONS, and _FOUND.
  
NOTE: we copy the linux installation on windows replacing usr/local with c:/Program Files/MATIS

